-VAR- COMO EN PYTHON EL TIPO LO DETERMINA EL DATO CON EL QUE LO INICIALICES
var variable = "hola"; -string
var variable2 = 5; - int



SE PUEDEN SUMAR LOS ARRAYS
"hola" + " " + "mundo" = "hola mundo"



PARA ESCRIBIR VARIABLES EN Console.WriteLine
Console.WriteLine($"El {variable} tiene {variable} años de edad"); ------ $ ---- "{variable}"

PARA ESCRIBIR "" EN Console.WriteLine
Console.WriteLine("El señor \" barriga \" es ..."); ----------- \"



SE PUEDE ESCRIBIR EL MISMO NOMBRE DE FUNCION CON DISTINTOS PARAMETROS (Solo funciona en la plantilla completa) (Se llaman sobrecargas)
int suma(int a, int b){
	return a+b;
}
int suma(int a, int b, int c){
	return a+b+c;
}



PARA DECLARAR UN ARRAY
int[] array = new int[tamaño]; -Si no se especifica se inicializan todos con 0
int[] array = new int[tamaño] {1,2,3,4,5};
int[] array2 = {1,2,3,4,5,6,7,8};

PARA DECLARAR UNA LISTA
List<int> lista = new List<int>(tamaño);
List<int> lista2 = new List<int> {1,2,3,4,5};

FOREACH (Como el for de python)
void mostrar(int[] array){
	foreach(int numero in array){
	Console.WriteLine(numero);  }	
}



CLASS/OBJETOS
 No se pude definir una clase adentro de una funcion
 Se puede definir una clase adentro de otra
 El constructor es el que construye un objeto
 Se pueden definir funciones adentro de clases

Player player = new Player(); -- LLAMA AL CONSTRUCTOR DE LA FUNCION

class Player{
	public Player(argumentos){ -- CONSTRUCTOR -- PUBLIC(Sino no se puede acceder desde otra parte del codigo)
		instrucciones
	}
}



STATIC
 Si declaras algo estatico en una clase esa variable va a pertenecer a la clase en si misma y no a cada una de sus instancias, es decir
todos los miembros comparten entre todos la misma instancia. Esta se puede acceder directamente a traves del nombre de la clase sin necesidad
de crear una instancia
 Pertenece a la clase en si misma y no a una de sus instancias
 Para acceder a una variable desde una funcion estatica esta tambien debe ser estatica
 Se puede acceder a una variable estatica desde una funcion no estatica
 Console.WriteLine es estatica ya que llamamos a la clase Console directamente

class Hola{
	public static name = "pedro"
	static void EscribirHola(){
		Console.WriteLine($"Hola {name}"); --Para acceder a una variable desde una funcion estatica esta tambien debe ser estatica
	}
}

Hola.EscribirHola(); --- Accedo directamente a la clase en vez de crear una instancia de la misma y acceder a la funcion



PUBLIC Y PRIVATE
 Los modificadores de acceso por defecto varian, por ejemplo en una clase es intrenal pero en funciones/variables de una clase es private
 Cuando es privado es solo accesible dentro de esa clase y nada mas
 Cuando es publica es accesible desde otras clases
 La mejor manera de manejar la complejidad es limitando la accesibilidad
 Existen muchos modificadores de acceso: file - private - private protected - internal - protected - protected internal - public
 Modificadores: https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers




CTROL + r + r PARA RENOMBRAR - En visual 2022




CODIGO LIMPIO
 No usar números mágicos
 No usar strings como identificadores
 Manejar la complejidad escondiendo información
 Un solo principio de responsabilidad(Una clase/funcion debe hacer una y solo una cosa)
 Agrupar la lógica o datos(En vez de tener 3 variables de stats de personaje hacer una clase con los stats del jugador)
 Evitar comentarios, el código debe ser entendible por si solo
 Siempre revisar y refactorizar el codigo 
 No repetir código

ENUM
 Pueden servir para retornar un estado en vez de algún numero mágico que represente alguna cosa
 Los enums pueden ser usados para maquinas de estado
 Los valores de los enums son guardados como ints
 enum es parte de system
 

 PlayerActions.Pactions pactions = PlayerActions.Pactions.NoEnemy; --- Se puede aumentar como un int
 pactions++;

 private enum PlayerState{
	Walking,
	Running,
	Combat,
	Sleeping,
 }
 
 

































